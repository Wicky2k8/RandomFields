\documentclass[nojss]{jss}
%\VignetteIndexEntry{Multivariate Geostatistics}
% \ Vignette Engine{knitr::knitr}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% declarations for jss.cls %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 

\usepackage{amsmath,amssymb}
\usepackage{booktabs} % for toprule/midrule etc
\def\Cov{\COV}
\def\CC{{\mathbb C}}
\def\EE{\E}
\def\NN{{\mathbb N}} 
\def\RR{{\mathbb R}}
\def\height{6.5cm}
\def\pdf{../jan.2014/pdf}
\def\pdf{}

\usepackage{color}


\author{Martin Schlather\\Universit\"at Mannheim
        \And
        Alexander Malinowski\\Universit\"at Mannheim
        \AND
        Peter J. Menck\\Potsdam Institute for Climate Impact Research
        \AND
        Marco Oesting\\AgroParisTech/INRA
        \And
        Kirstin Strokorb\\Universit\"at Mannheim
      }
\title{Analysis, Simulation and
Prediction of Multivariate Random Fields with  Package \pkg{RandomFields}}

\Plainauthor{Martin Schlather, Alexander Malinowski, Peter J. Menck, 
  Marco Oesting, Kirstin Strokorb
} 
\Plaintitle{Analysis, Simulation and
Prediction of Multivariate Random Fields with Package RandomFields} 
\Shorttitle{\pkg{RandomFields}: Multivariate Fields} 

\Abstract{
Modeling of and inference on multivariate data that have been
measured in space, such as temperature and pressure, 
are challenging
tasks in environmental sciences, physics and materials science.
We give an overview over and some background on modeling with
cross-covariance models. The \proglang{R} package \pkg{RandomFields}
supports the simulation, the parameter estimation and the 
prediction in particular for the 
linear model of coregionalization, the multivariate Mat\'ern models, the
delay model, and a spectrum of physically motivated vector valued
models. An example on weather data is considered, illustrating the
use of \pkg{RandomFields} for parameter estimation and prediction.
}


\Keywords{multivariate geostatistics, bivariate Mat\'ern model, 
  linear model of coregionalization, 
  matrix-valued covariance function, multivariate random
  field, \proglang{R}, vector-valued field}

\Plainkeywords{multivariate geostatistics, bivariate Mat\'ern model, 
  linear model of coregionalization, 
  matrix-valued covariance function, multivariate random
  field, R, vector-valued field} 

%% publication information
%% NOTE: Typically, this can be left commented and will be filled out by the technical editor
%% \Volume{50}
%% \Issue{9}
%% \Month{June}
%% \Year{2012}
%% \Submitdate{2012-06-04}
%% \Acceptdate{2012-06-04}

\Address{
  Martin Schlather\\
  Institute for Mathematics\\
  School of Business Informatics and Mathematics\\
  Universit\"at Mannheim\\
  68131 Mannheim, Germany\\
  E-mail: \email{schlather@math.uni-mannheim.de}\\
  URL: \url{http://ms.math.uni-mannheim.de/}
}



\begin{document}

<<echo=FALSE>>=
library(RandomFields)
options(prompt = "R> ", continue = "+  ", width = 70, useFancyQuotes = FALSE)

options(device="jpeg")
RFoptions(resolution=60)
@


This vignette is based on \cite{SMMOS14}.


\section{Introduction}

Spatial data very frequently have more than one component. In
meteorology, for instance, temperature, rainfall and pressure are
measured at the same locations at predefined instances in
time.
 Similarly, in order to estimate the spatial distribution of
rainfall, data from rain gauges are combined with radar data. In
economy, to name a further example,
price developments of goods are spatio-temporal
data consisting of various components at each instant of time and at
each market.

Although these kinds of data are ubiquitous, multivariate spatial
models are largely underdeveloped and multivariate space-time models
are unknown, except for simple constructions.  This paper deals with
multivariate spatial data, only. We denote a
random process on a subset of $\RR^d$, $d\ge 1$, with scalar values
a \emph{univariate} random field, whilst other authors denote such a
process already multivariate if $d\ge 2$.  Here, a \emph{multivariate} random
field is an $\RR^m$-valued random process on a subset of $\RR^d$ with
$m \geq 2$. Such fields are called \emph{multivariable} in the package
\pkg{gstat} \citep{gstat}.

The analysis and the modeling of data stemming from multivariate
random fields have been reported in the geostatistical literature since long,
cf.\  \cite{wackernagel} and \cite{chilesdelfiner}, for example.
Recently, the subject of multivariate geostatistics has been taken up
and various new models have been suggested
\citep{apanasovichgenton10,GKS10,BDPS14}. 


Even though several \proglang{R} packages \citep{R} like \pkg{fields}
\citep{fields}, \pkg{geospt} \citep{geospt12}, \pkg{SpatialTools}
\citep{SpatialTools} or \pkg{spTimer} \citep{spTimer13} address the
simulation and inference for spatial data, it seems that only the
packages \pkg{gstat} \citep{gstat}, \pkg{multivator}
\citep{multivator} and \pkg{spBayes} \citep{spBayes} can handle 
\emph{multivariate} random fields in the above sense.


While \pkg{spBayes} mainly focuses on spatial regression models, 
\pkg{multivator} allows for inference and prediction of multivariate
data based on emulator techniques \citep{oakley99}. 
The package \pkg{gstat} provides several tools for prediction and
model fitting and also allows for multi-Gaussian sequential
simulation. However, to the best of our knowledge, the package 
\pkg{RandomFields} \shortcites{RandomFields}\citep{RandomFields}
is by now unique in its variety of tools and
models for multivariate spatial processes. 


The paper is organized as follows. In Section~\ref{sec:background},
a summary of the theoretical background is
given. Section~\ref{sec:simulation} discusses principles for analyzing
and  
simulating multivariate random fields.
Section~\ref{sec:examples}  offers an overview over multivariate and
vector-valued
covariance functions that are implemented in
\pkg{RandomFields}.
Section~\ref{sec:example} reconsiders the data analysis
by \citet{GKS10}.
Section~\ref{sec:outlook} concludes with
a brief summary of other features of
\pkg{RandomFields} that are already available or are intended
to be implemented. 

\section{Background:  cross-covariance functions and cross-variograms}
\label{sec:background}
Throughout the paper, a second order $m$-variate random field on
$T\subset \RR^d$ denotes
a collection of real-valued random vectors
$Z(x)=(Z_1(x), \ldots, Z_m(x))$
indexed by $x \in T$ with existing second moments.
For theoretical considerations it suffices to assume
$\EE Z_j(x) =0$
for all $x\in\RR^d$ and $j=1, \ldots, m$.
The cross-covariance function $C:T\times T\rightarrow \RR^{m\times m}$
is defined by
$$
C_{jk}(x, y) = \Cov(Z_j(x), Z_k(y)), \qquad x, y\in T,
j, k=1, \ldots, m
.$$
The function $C$ is positive definite, i.e., 
 $C(x, y) = {C^\top(y, x)}$ and
\begin{eqnarray}
  \label{eq:posdef}
\sum_{p=1}^n\sum_{q=1}^n a_p^\top C(x_p, x_q) a_q \ge0
\end{eqnarray}
for all $n\in\NN$, $x, y, x_1, \ldots, x_n\in T $  and
$a_1, \ldots, a_n\in\RR^m$.
The cross-variogram $\gamma:T \times T \rightarrow \RR^{m\times
  m}$,
is defined by
$$
\gamma_{jk}(x, y) =  \frac12 \EE( Z_j(x)-Z_j(y)){(Z_k(x)-Z_k(y))},
\qquad x, y\in T , \; j, k=1, \ldots, m
.$$
If the cross-covariance function $C$ 
(the cross-variogram $\gamma$)
depends on $x$ and $y$ only through the distance vector
$x-y$, then $Z$ is called weakly stationary or just stationary
(intrinsically stationary).
We then write $C(h)$ and $\gamma(h)$ as functions that depend only on
one argument $h=x-y$. Clearly, stationarity implies intrinsic stationarity.
Further relations between covariance functions and variograms exist,
see \cite{chilesdelfiner} and \cite{schlather12}, for
instance, and the references therein.

In the univariate case, (weak) isotropy of $Z$ is uniquely
defined and  means that the function $C$ or $\gamma$
is rotation invariant. In the
multivariate case the notion of isotropy has different
interpretations.  Assume that
the bivariate field $Z$ models temperature and pressure. Then $Z$ should
be called isotropic if
$$
C(x, y) = C(Ax, Ay) \hbox{ or } \gamma(x,y) = \gamma(Ax, Ay)
\qquad \hbox{for all rotation matrices }A\in\RR^{d\times d}.
$$
Assume now that $Z$ models a vector field of directed quantities in
$\RR^d$, e.g., wind speed in $\RR^2$.  Then $Z$ has necessarily $m=d$
components and it should be called isotropic if
 $Z(\cdot)\stackrel{\mathcal{D}}{=} A^\top Z(A\,\cdot)$, i.e.,
$$
C(x,y) = A^\top C(Ax,Ay)A \qquad \hbox{for all rotation matrices
}A\in\RR^{d\times d}
.
$$ A similar definition holds for the variogram $\gamma$.  We call the
latter models isotropic \emph{vector-valued models} whilst the former
ones are referred to as isotropic \emph{multivariate models}.

\section{Simulation and inference}\label{sec:simulation}
Several methods for the simulation of univariate random fields in
$\RR^d$ exist, see \cite{lantuejoul} for an
overview. The simulation of univariate random fields 
based on Cholesky decomposition, see also \pkg{SpatialTools},
can be directly transferred to the multivariate case. 
As the Cholesky decomposition currently reaches its limits 
with a matrix of about size $10^4 \times 10^4$, only about 2500
locations can be modeled in a bivariate setup and about 1000 locations
in a trivariate setup.
The circulant embedding method by \cite{dietrichnewsam93} and
\cite{woodchan94} is extremely powerful for simulating
on a regular grid in $\RR^d$
when $d$ is small and the random field is stationary.
Their algorithms are implemented in various packages, e.g.,
\pkg{dvfBm} \citep{dvfBm}, \pkg{fields}, and \pkg{stpp} \citep{stpp}.
The method has been extended by \cite{dietrichnewsam96} and \cite{chanwood99}
to the multivariate case. In 
 \pkg{RandomFields},  the Cholesky decomposition
and the circulant embedding method suggested by
\cite{dietrichnewsam96} are implemented also in the multivariate
case. Furthermore, an extended version of Matheron's turning bands method
\citep{matheron73} for the multivariate case is implemented.

Various methods exist to estimate the parameters
of an intrinsically stationary random field.
Least squares methods  are based on the variogram cloud
or a binned version of it, and do not require further
assumptions on the fields \citep{cressie}. For example, the package \pkg{gstat}
relies mainly on these methods.
The second often used method is the maximum likelihood (ML) 
method which 
relies on the additional important assumption of the Gaussianity of the
field. Showing that the ML approach is not too far from an established
approach in approximation theory, \cite{scheuerer11} gives some
indication why ML often works well even when the assumption
of Gaussianity is violated.  
The ML method and its variants (\pkg{geoR}, \citealp{geoR}, \pkg{CompRandFld},
\citealp{CompRandFld}) is frequently
implemented for parametric inference on spatial data.
For Gaussian random fields, this amounts to estimating a parametrized trend
and the covariance structure.  
Therefore, ML methods can be
readily extended to the multivariate case.

At least three different kinds of  well known
difficulties exist with the classical
ML approach: first, the number of data is rather limited as the
multivariate Gaussian density function involves
the inverse of the covariance matrix,
so that the calculation of the likelihood 
needs of order $N^3$ operations. There are various
work-arounds,
for instance, Markov random field theory allows
to work directly on the inverse matrix, i.e., the
precision matrix, \citep{rue01,SLR11}.
Composite likelihood approaches simplify the likelihood function
by additional assumptions,
cf.\ \cite{lindsay88}.
A second difficulty is that the number of
 parameters increases rapidly with the number $m$ of
components resulting frequently in likelihood functions with lots of
local maxima.
As numerical optimizers such as \code{optim} are not always reliable
in this case,
\pkg{RandomFields} estimates a sequence of simpler models,
starting with the model that has independent components,
ending up with the full set of parameters, see Section
\ref{sec:example} for an example. 
The price to be payed are rather long running times.

The third difficulty is the choice of the initial values of the
numerical optimization algorithm for maximizing the likelihood.
Various strategies exist. In \pkg{geoR}, 
initial starting values can be created by various methods
and are then passed as an argument to the fitting procedure.
Others seem to use fixed values only (\pkg{fields}).
Data based initial values are considered
by \pkg{CompRandFld} using a weighted moment estimator
and by \pkg{gstat} extracting values from the variogram cloud.
Usually, the packages allow for an additional starting value given by
the user. \pkg{RandomFields} estimates variances and scales 
very roughly from the data and uses fixed values for other parameters 
to perform several variants of the least squares fit.
Afterwards it uses the best parameter set of the least squares fits as
initial values for the ML estimation.
Similar to the packages \pkg{CompRandFld} and \pkg{fields}, the
package \pkg{RandomFields} recognizes sparse matrices and uses the
package \pkg{spam} \citep{spam} for calculating the likelihood. 

Being also mathematically based on the inverse of the covariance matrix,
spatial prediction methods face similar problems as the
ML approach \citep{chilesdelfiner}. Work-arounds that
share the same idea with the composite likelihood approach,
 such as the
neighbourhood kriging \citep{demarsily}, have been suggested.
Many packages exist that deal with kriging, for instance,
\pkg{constrainedKriging} \citep{constrainedKriging},
\pkg{DiceKriging} \citep{DiceKriging} and \pkg{geoR}.
The package \pkg{gstat}  offers an enormous amount of variants for
kriging, including multivariate kriging for linear models of
coregionalization \citep{goulardvoltz92}.
\pkg{RandomFields} allows for basic kriging tasks,
such as simple kriging, ordinary kriging and universal kriging,
on a large variety of models.

A last, also well-known difficulty appears with earth data
as only few packages like \pkg{sspline} \citep{sspline} handle spherical data.
Usually, the data are transformed in different ways
to more convenient distances by the various packages.
The packages \pkg{gstat} and \pkg{fields} 
use great circle distances. Additionally, \pkg{fields} also 
considers the data as having fully 3-dimensional
coordinates, from which the usual Euclidean distances are calculated.
The latter is also the case in \pkg{RandomFields}.
While the package \pkg{fields} approximates the earth by a ball,
\pkg{RandomFields} assumes an ellipsoid.


\section{Models}\label{sec:examples}
Among the covariance models considered as the most important
ones in geostatistics are the
Whittle-Mat\'ern model \citep{stein,guttorp2006studies}, its special
cases, the exponential model and the Gaussian model, and the spherical
model which has compact support \citep{chilesdelfiner}. Only a few
packages allow for a wider spectrum of models, for instance \pkg{geoR}.
On the multivariate side, the packages \pkg{gstat} and
\pkg{spBayes} allow for some choice of multivariate models.

In the following, we describe the cross-covariance models
and the cross-variogram models that can be used within
\pkg{RandomFields}. A comprehensive list of models is given by
Table~\ref{table:models}. 
Multivariate models like the latent dimension model and the
linear model of coregionalization can be derived from a wide spectrum
of univariate models, some of them being presented along this section.

The pieces of code given suffice to produce all the
pictures as presented if the following three options
<<>>=
RFoptions(seed = 0, height = 4, always_close_screen = FALSE)
@

<<echo=FALSE>>=
if (!interactive()) {
  #options(device="jpeg")
  RFoptions(always_close_screen = TRUE, pch="")
}
@


are set once, at the very beginning.
The first option sets the seed for every subsequent simulation to
$0$. The second one
sets the height of a single figure in the graphical display to 4 and indicates
also that 
the aspect ratio of the figure will be calculated internally.
The third one has the effect that a new window is opened for each plot.

\begin{table}
  \centering
  \fbox{
  \begin{tabular}{lll}
    Name & Description & Particularities
    \\\midrule
    \multicolumn{2}{l}{\bf Stationary and isotropic multivariate models}
    \\\code{RMbiwm} & bivariate Whittle-Mat\'ern model &
    modeling differentiability
    \\\code{RMbigneiting} &	bivariate Gneiting model& finite support
    \\\code{RMparswm} & multivariate Whittle-Mat\'ern model&
    modeling differentiability
    \\[3mm]
    \multicolumn{2}{l}{\bf Other multivariate models}
    \\\code{RMdelay} &	bivariate delay effect model & anisotropic
    \\\code{RMexponential} & functional $\exp$	 & operator
    \\\code{RMmatrix} &	matrix multiplication  & operator
    \\\code{RMschur}& 	element-wise product  & operator
    \\\code{RMmqam} &	multivariate quasi-arithmetic mean & operator
    \\[3mm]
    \multicolumn{2}{l}{\bf Vector-valued models}
    \\\code{RMcurlfree} & curl free vector-valued field & operator
    \\\code{RMdivfree} & divergence free  vector-valued field& operator
    \\\code{RMkolmogorov} & Kolmogorov's model of turbulence &
    isotropic variogram
    \\\code{RMtbm} & turning bands operator	 & operator
    \\\code{RMvector} & combining \code{RMcurlfree} and
    \code{RMdivfree} & operator
\end{tabular}
}
  \caption{\label{table:models}Multivariate and vector-valued
    models implemented in \pkg{RandomFields}. }

\end{table}

\subsection{Multivariate models}\label{sec:basic}

The most commonly used model for a multivariate process
$Z=(Z_1, \ldots, Z_m)^\top$
is probably the linear model of
coregionalization \citep{goulardvoltz92}, 
which is also offered by \pkg{gstat}.
Here, each component $Z_i$ is a linear combination
$ \sum_{j=1}^k m_{ij} Y_j$
of
independent, latent univariate processes
$Y_j$ and $M=(m_{ij})\in\RR^{m\times k}$ is an
arbitrary matrix. Writing $M_j = (m_{1j},\ldots, m_{mj})^\top$ we have
$$
Z = \sum_{j=1}^k M_j Y_j
.$$
The cross-covariance function of $Z$
equals $M C M^\top$
where $C$ is a diagonal matrix containing the covariance functions of
the univariate processes $Y_j$.
Obviously, the vector of
independent processes $Y=(Y_1,\ldots, Y_k)$ might be replaced by
any arbitrary second order process $Y$, so that $C$ can be replaced by any
arbitrary $k\times k$ cross-covariance function.
The function \code{RMmatrix}  in \pkg{RandomFields} allows for this
generality. The parameter $k$ must be at most $10$.
To consider an example, let $k=2$,
 $$M_1= \left(
  \begin{array}{c}
    0.9 \\
     0.6 
  \end{array}
  \right),
  \qquad
M_2 = \left(
  \begin{array}{c}
   \sqrt{0.19}\\
    0.8
  \end{array}
  \right),
$$
and $Y_1,Y_2$ be independent univariate Gaussian random fields with
Whittle-Mat\'ern covariance function
$$
W_\nu(h)=2^{1- \nu}
  \Gamma(\nu)^{-1}\|h\|^{\nu}K_{\nu}(\|h\|),\qquad h\in\RR^d
.$$
Here, $K$ is a modified Bessel function, $\Gamma$  the Gamma function,
and $\nu>0$ a smoothness para\-meter. The values of $M_1$ and $M_2$
imply that all the variables have variance $1$.
This model can be defined in \pkg{RandomFields} as follows, see Figure~\ref{fig:lmc} for a realization:
<<echo=FALSE>>=
RFoptions(file="lmc",onefile=TRUE)
@ 
<<results=tex>>=
M1 <- c(0.9, 0.6)
M2 <- c(sqrt(0.19), 0.8)
model <- RMmatrix(M = M1, RMwhittle(nu = 0.3)) +
            RMmatrix(M = M2, RMwhittle(nu = 2))
x <- y <- seq(-10, 10, 0.3)
simu <- RFsimulate(model, x, y)
plot(simu)
@
In particular, $\nu$ 
 takes here the value $0.3$ and $2$, respectively.
Note that, in \pkg{RandomFields}, all commands that 
define models start with `\code{RM}'
whilst functions start with '\code{RF}'.
The models in \pkg{RandomFields} mostly include more parameters than
given here. These parameters are set to standard values if they are
not given. For instance, the standard value for variance and scale is $1$.

\begin{figure}
  \centering
  \includegraphics[width=10cm]{\pdf lmc}
  \caption{\label{fig:lmc}
   Simulation of a bivariate linear model of coregionalization.}
\end{figure}


\cite{wackernagel} suggests a bivariate delay effect model of the form
$$
C_{11}(h)=C_{22}(h)=C_0(h), \quad C_{12}(h)=C_0(h+s), \quad
C_{21}(h)=C_0(h-s),
$$
where $C_0$ is an arbitrary univariate stationary covariance function
and $s \in \RR^d$. Here, the components of
the corresponding random fields experience a pure shift,
see Figure~\ref{fig:delay0}.
The corresponding code is

<<echo=FALSE>>=
RFoptions(file="delay0",onefile=TRUE)
@ 
<<results=tex>>=
model <- RMdelay(RMstable(alpha = 1.9, scale = 2), s = c(4, 4))
simu <- RFsimulate(model, x, y)
plot(simu, zlim = 'joint')
@

\begin{figure}
  \centering
  \includegraphics[width=10cm]{\pdf delay0}
  \caption{Simulation of Wackernagel's (2003) delay effect
    model. Here, the shift $s$ equals $s=(4,4)$. 
    \label{fig:delay0}}
\end{figure}
   Here, the  shift equals $s=(4,4)$. The
   underlying Gaussian random field possesses the so-called
   stable covariance model, also called power exponential model,
$$
C_0(h) = \exp(-(\|h\|/S)^\alpha)
$$
with scale parameter $S=2$ and shape parameter $\alpha=1.9$.
The parameter \code{zlim} that is well-known from the function
 \code{image} allows
here for further options. Both, the value \code{'joint'} and a simple
two-dimensional vector fix the same range for all images.
A matrix-valued \code{zlim} is able to
determine a separate range for each column of the plot.

The delay model can be extended to an $(m+1)$-variate model as well as to
a superposition of different shifts:
\begin{eqnarray}
  \label{eq:delay}
  C(h) = \left(\sum_{\kappa=1}^k C_{0,\kappa}(h -s_{\kappa,i} +
    s_{\kappa,j})\right)_{i, j=0,\ldots,m}
\end{eqnarray}
where $C_{0,\kappa}$ are univariate covariance functions,
$s_{\kappa,i} \in \RR^d$ and $s_{\kappa, 0} =0$.
Even for $k=2$ and $C_{0,1}=C_{0,2}$ the
delays cannot be recovered by visual inspection, see Figure~\ref{fig:delay}.
Here, the above \code{model} has been replaced by
<<>>=
model <- RMdelay(RMstable(alpha = 1.9, scale = 2), s = c(0, 4)) +
            RMdelay(RMstable(alpha = 1.9, scale = 2), s = c(4, 0))
@
<<echo=FALSE,results=tex>>=
RFoptions(file="delay", onefile=!TRUE)
simu <- RFsimulate(model, x, y)
plot(simu, zlim = 'joint')
#options(device="pdf")
@ 
The contour plot for the covariance function has been obtained by
<<results=tex>>=
plot(model, dim = 2, xlim = c(-5, 5), main = "Covariance function", 
        cex = 1.5, col = "brown")
@

The generalized model given by Equation~\ref{eq:delay} is implemented in
\pkg{RandomFields} for $k\le 10$.


\begin{figure}
  \centering
  \includegraphics[width=10cm]{\pdf delay000}

  \vspace*{1em}

  \includegraphics[width=10cm]{\pdf delay001}
 
  \caption{ Bivariate generalized delay effect model according to
    Equation~\ref{eq:delay}: simulation (top) and
    contour plots for the components of the corresponding
    matrix-valued covariance function (bottom).
    \label{fig:delay}}
\end{figure}


A third basic construction principle is the latent dimension model
\citep{apanasovichgenton10}. Here, additional 
spatial dimensions serve as a source for the multivariate components:
$$
Z_i(x) = Z_0(x, z_i), \quad x\in\RR^d,\ i=1,\ldots,m,
$$
for a random field $Z_0$ in $\RR^{d+k}$ and vectors $z_i\in\RR^k$.
An example is given in Figure~\ref{fig:latent}, where
$m=d=2$, $k=1$, $z_1=0$ and $z_2=1$,

<<echo=FALSE>>=
RFoptions(file="latent",onefile=TRUE)
#options(device="jpeg")
@ 
<<results=tex>>=
model <- RMgencauchy(alpha = 1.5, beta = 3)
simu <- RFsimulate(model, x, y, z = c(0, 1))
plot(simu, MARGIN.slices = 3, n.slices = 2)
@

Here, the covariance function of $Z_0$ is a generalized Cauchy
model \citep{cauchy},
$$
C(h) = (1+\| h \|^\alpha)^{-\beta/\alpha}
$$
with parameter $\alpha=1.5$ and $\beta=3$.
The argument \code{MARGIN.slices} gives the latent dimension $d+k$.
The argument \code{n.slices} equals $m$ if we are interested in a
$m$-variate field. The slices are equally distributed on a grid
given for the latent dimension. As this plotting technique of slices
is independent of any theory on latent dimensions the names of the
arguments refer to the technical aspect only.

\begin{figure}
  \centering
  \includegraphics[width=10cm]{\pdf latent}
  \caption{Simulation of the latent dimension model\label{fig:latent}.}
\end{figure}

The random fields for the different variables are visually similar for all
models given here. In particular, the paths of all components show the same
degree of smoothness. The multivariate quasi-arithmetic mean model by 
\cite{PMC09},
$$
C_{ij}(h) =  \varphi\left(\sqrt{\theta
    (\varphi^{-1}(C_{0,i}(h)))^2 + (1
  - \theta) (\varphi^{-1}(C_{0,j}(h)))^2 }\right),
\qquad i,j=1,\ldots, m,
$$
exhibits similar limitations. Here the $C_{0,i}$ are arbitrary
univariate covariance functions, $\varphi$ is a completely monotone
function \citep{BCR,SSV} and $\varphi^{-1}$ is its inverse.


\label{sec:multi}
\cite{GKS10} present a multivariate
extension of the Whittle-Mat\'ern model $W_\nu$.
Let
$ C_{ij}(h) = (c_{ij} W_{\nu_{ij}}(h/s_{ij}))_{i, j=1, \ldots,m}$ with $c_{ij}=
c_{ji}\in\RR$, $c_{ii}\ge0$,
$\nu_{ij}=\nu_{ji}>0$ and $s_{ij}=s_{ji}>0$  for $i, j=1,\ldots, m$.
Let $C=(C_{ij})_{i,j=1,\ldots, m}$.
If $m=2$ then $C$ is a cross-covariance function if and only if
$$
c_{12} = \rho_{\rm red}
\left(c_{11}c_{22} G_{12}
\frac{s_{11}^{d} s_{22}^{d}}{s_{12}^{2d}}
\inf_{t \geq 0}
\frac{(1+ t^2 / s_{12}^{2})^{2\nu_{12} + d}}
     {\prod_{i=1}^2(1 + t^2/s_{ii}^2)^{\nu_{ii} + d/2}
     }
\right)^{1/2}
$$
for some $\rho_{\rm red} \in [-1,1]$ and
$$
G_{ij} = \frac{\Gamma(\nu_{ii} + d/2) \Gamma(\nu_{jj} + d/2)
      \Gamma(\nu_{ij})^2}{\Gamma(\nu_{ii}) \Gamma(\nu_{jj})
      \Gamma(\nu_{ij}+d/2)^2}
.$$
\cite{GKS10} show that the right-hand side of the above equality is
$0$, i.e., $c_{12}$ is necessarily $0$ if and only if
$\nu_{12} < \frac 12(\nu_{11} + \nu_{22})$. Hence, we may introduce
$\nu_{\rm red} = 2 \nu_{12} /(\nu_{11} + \nu_{22})$ which must be
greater than or equal to $1$ to have dependent components.
Figure~\ref{fig:biwm} gives an illustration obtained by
the following code:

<<echo=FALSE>>=
RFoptions(file="biwm",onefile=TRUE)
@ 
<<results=tex>>=
model <- RMbiwm(nudiag = c(1, 2), nured = 1, rhored = 1, cdiag = c(1, 5),
                   s = c(1, 1, 2))
simu <- RFsimulate(model, x, y)
plot(simu)
@

\begin{figure}
  \centering
  \includegraphics[height=\height, width=10cm]{\pdf biwm}
  \caption{Simulation of the bivariate Whittle-Mat\'ern model\label{fig:biwm}.}
\end{figure}
i.e., in the above model we have
$$
\nu_{11}=1, \;\  \nu_{22}=2, \;\  \nu_{12} 
= 1.5,
\;\  \rho_{\rm red}=1, \;\  c_{11} = 1, \;\   c_{22} =5,
\;\  s_{11}=1, \;\  s_{12}=1, \;\  s_{22}=2
.$$

For the general $m$-variate case, \cite{GKS10} give a sufficient condition for
$C$ being a cross-covariance model,
\begin{eqnarray}
  \label{eq:pars}
s_{ij} = s  >0, \quad \nu_{ij} = \frac12(\nu_{ii} + \nu_{jj})  \hbox{ and }
c_{ij}  =\sqrt{G_{ij}}\quad
\hbox{for all } i,j=1,\ldots, m
.\end{eqnarray}
The multivariate model for three or more variables is 
available in \pkg{RandomFields} by the function
\code{RMparswm}. The parsimonious model $K$ introduced in \cite{GKS10}
allows for more flexibility, $K_{ij} = \rho_{ij} C_{ij}$ where $C$ 
is given by the equalities in Equation~\ref{eq:pars} and 
 $\rho$ is an arbitrary covariance matrix. 
This generalization is implemented by 
the model \code{RMparswmX} defined as
<<>>=
RMparswmX <- function(nudiag, rho, var, scale, Aniso, proj) {
   RMschur(M = rho, RMparswm(nudiag, var, scale, Aniso, proj))
}  
@
Here, \code{RMschur} defines the Schur product between 
two matrices, here $\rho$ and $C(h)$ for any fixed value of $h$.

Anisotropic models can be defined through the argument
\code{Aniso}. For instance, the code
<<echo=FALSE>>=
RFoptions(file="aniso",onefile=TRUE)
@ 
<<results=tex>>=
A1 <- RMangle(angle = pi / 4, diag = c(0.1, 0.5))
A2 <- RMangle(angle = 0, diag = c(0.1, 0.5))
model <- RMmatrix(M = M1, RMgengneiting(kappa = 0, mu = 2, Aniso = A1)) +
            RMmatrix(M = M2, RMgengneiting(kappa = 3, mu = 2, Aniso = A2))
simu <- RFsimulate(model, x, y)
plot(simu)
@
defines an anisotropic model of coregionalization.
Here, \code{M1} and \code{M2} are defined as above,
\code{angle} gives the clockwise rotation and \code{diag}
the inverse of the stretch factors in the new directions, cf.\ 
Figure~\ref{fig:aniso1}. The covariance model \code{RMgengneiting}
refers to  the Gneiting
class \citep{gneiting.atmospheric,wendland},
where \code{kappa} denotes a parameter for
the differentiability of the model and \code{mu} denotes an additional form
parameter. These models have compact support. For $\kappa=0$ and
$\kappa=3$ they are defined as 
$$
C(h) = (1-\|h\|)^{\beta}I(\|h\|\le 1)
$$
and
$$
C(h) = (1 + \beta \|h\| + (2 \beta^2 - 3 )\|h\|^2 / 5 +
(\beta^2 - 4) \beta \|h\|^3 / 15) (1-\|h\|)^\beta I(\|h\|\le 1)
,$$
respectively. Here, $\beta=\mu + 2 \kappa + 1/2$ and $I(\|h\|\le 1)$ is the
indicator function.
 


Finally, \cite{BDPS14} derive multivariate models with compact support 
based on the
Gneiting class.
The bivariate model is available as \code{RMbigneiting}.


\begin{figure}
  \centering
  \includegraphics[height=\height, width=10cm]{\pdf aniso}
  \caption{Simulation of an anisotropic model of coregionalization.
    \label{fig:aniso1}}
\end{figure}


\subsection{Vector-valued models}
\label{sec:vector}

Vector fields are used 
to describe fluxes of liquids or gases in fluid mechanics 
\citep{patankar1980numerical,chorin1990mathematical}, as well as 
 fields of forces, e.g., electro-magnetic fields
\citep{stratton2007electromagnetic} or, more generally, as
gradients of potentials \citep{kellog1929foundations}.

Stochastic vector fields appear naturally within
Kolmogorov's theory of turbulent flows \citep[Section 6.2]{pope}.
Here, micro-fluctuations are described by an intrinsically stationary, isotropic
vector field, given by the variogram $\gamma$,
\begin{eqnarray}
  \label{eq:kolmo}
  \gamma_{ij}(h) = \|h\|^{2/3}\left(\frac43 \delta_{ij} -
    \frac13\frac{h_ih_j}{\|h\|^2}\right),\qquad h\in\RR^3
.\end{eqnarray}
Here $\delta_{ij}=1$ for $i=j$ and $\delta_{ij}=0$, otherwise.
It is well-known that the marginal distributions in a
turbulent flow are not Gaussian.

Let $F=(F_1,\ldots, F_d)$ be a vector field on $\RR^d$. 
The curl $\nabla \times F$ is defined as
$\nabla \times F={\partial F_2}/{\partial x_1} -
  {\partial F_1}/{\partial x_2}$  if  $d=2$ 
and as 
$$
\nabla \times F =
\left(\frac{\partial F_3}{\partial x_2} -
  \frac{\partial F_2}{\partial x_3}\right)e_1 +
\left(\frac{\partial F_1}{\partial x_3} -
  \frac{\partial F_3}{\partial x_1}\right)e_2 +
\left(\frac{\partial F_2}{\partial x_1} -
  \frac{\partial F_1}{\partial x_2}\right)e_3
$$
if $d=3$.
Here, the $e_i$  are the canonic unit vectors.
The divergence $\nabla\cdot F$ is given as
$$
\nabla\cdot F = \sum_{i=1}^d \frac{\partial F_i}{\partial x_{i}} 
.
$$

An important statement, not only for the theory of turbulence, is
the Helmholtz decomposition: Under mild regularity assumptions,
a vector field $F$ in three dimensions can be uniquely decomposed
into a curl free vector field $F^c$, i.e.,
$$
\nabla \times F^c = 0,
$$
and a divergence free vector field $F^d$, i.e.,
$$
\nabla\cdot F^d = 0
$$
such that $F=F^c + F^d$ \citep{sagaut2008homogeneous}.
A curl free vector field $F^c$ can  either be interpreted
as the flux of an incompressible liquid that is verbally driven
by sinks and sources, or it describes a fluid that is
compressible and liquid 'disappears' if it is compressed.
The absolute value of the divergence $\nabla\cdot F$
gives the strength of the sinks and sources, where the sign determines
whether it is a sink or a source.
Divergence free vector fields describe vortices and magnetic fields.
The direction of the curl $\nabla \times F$ gives the axis of the
vortex and the norm of the curl its strength.

Stationary and non-stationary
Gaussian random fields that are divergence free or curl free
(in the mean square sense, hence pathwise) 
can be easily constructed from a sufficiently often differentiable
univariate covariance function, $C_0$ say, cf.~\cite{matheron72,matheron73}, 
for instance. For simplicity, let $C_0$ be  translation invariant.
Then,
$$
   C^d(h)=( - \Delta E + \nabla \nabla^\top ) C_0(h)
$$
is the cross-covariance function of a stationary divergence free random field and
$$
  C^c(h)=( - \nabla \nabla^\top) C_0(h)
$$
is the cross-covariance function of a
curl free random field. Here, $E$ denotes the identity matrix and
$\Delta$ denotes the Laplace operator.
\cite{scheuererschlather12} show that
if a vector-valued random field on $\RR^2$ is divergence free or curl
free or a vector-valued random field on $\RR^3$ is curl free, 
then their cross-covariance functions have been
obtained by  essentially the above construction.

The  curl free models, the divergence free models, and
Kolmogorov's cross-variogram have  been implemented in \pkg{RandomFields}.
The covariance model \code{RMcurlfree} defines random fields in
$\RR^2$  that have
four components: the first component is the (random) potential field given
by $C_0$, the next two components give the derived (curl free) vector
field, whereas the last component gives the field of sinks and sources
of the vector field, i.e., the divergence of the vector field.
In fact, due to the included field of sinks and sources, whose
covariance function equals $\Delta^2C_0$,
 the covariance function $C_0$ must be at least four times differentiable.
Random fields simulated with \code{RMdivfree} have also four
components that can be interpreted in a similar way, the last
component being here the curl of the respective divergence free vector
field.
Figure~\ref{fig:divfree} illustrates such a four-variate
random field. The code is

<<echo=FALSE>>=
RFoptions(file="curlfree",onefile=!TRUE)
#options(device="pdf")
@ 
<<results=tex>>= 
model <- RMcurlfree(RMmatern(nu = 5), scale = 4)
simu <- RFsimulate(model, x, y)
plot(simu, select.variables = list(1, 2 : 3, 4))
plot(model, dim = 2, xlim = c(-3, 3), main = "", cex = 2.3, col = "brown")
@
\begin{figure}
  \centering
  \includegraphics[width=14.5cm]{\pdf curlfree000} 

  \bigskip 
  \includegraphics[width=10.5cm]{\pdf curlfree001}
   \caption{ Simulation of a curl free vector field.
     Top left: potential field (variable~1);
     top center: the corresponding curl free vector field
     (variables~2/3) is given by the arrows whose length can be
     visibly inspected by comparing them to the above arrow which
     represents a vector of length 2; 
     top right: the field of sinks and sources (variable~4), i.e., the
     divergence of the vector field in the top center;
    bottom: contour plots of the covariance function for these variables 1-4.
    \label{fig:divfree}}
\end{figure}
Here, \code{plot} has the additional argument \code{select.variables}, by
which the user chooses the components to be plotted and the way they
are plotted. If \code{select.variables} is not given
then \code{plot} plots all components
separately. 
If \code{select.variables} is a list,
then any component of the list should be a scalar or a vector and is plotted
in a separate figure. If an element of the list is a scalar, an \code{image}
is created. If the element is a bivariate vector a vector field
is created and if the element is a trivariate vector, an \code{image}
is plotted for the first component, and, additionally, a vector field
is shown given by the subsequent two components.

The model \code{RMvector} allows combinations
 of
a divergence free and a curl free spatial or space-time random field
$$
C(h,t)=( -0.5 (a + 1) \Delta  + a \nabla \nabla^\top ) C_0(h, t),
\quad h\in\RR^d,\ t\in\RR, \; d=2,3,
$$
where the $\nabla$-operators and the Laplace operator
act on the spatial components only and $a \in [-1,1]$. The model is
parametrized in a way such that $a=-1$ corresponds to a curl free field and
$a=1$ to a divergence free field. The corresponding random
field is bivariate and contains the vectors only.
Here, the covariance function $C_0$ must be
only twice differentiable in the spatial component since the field of
sources and sinks or curls is not included.
Finally, Figure~\ref{fig:kolmogorov}
shows an intrinsically stationary Gaussian vector field
with Kolmogorov's variogram, which has been obtained by
<<echo=FALSE>>=
RFoptions(file="kolmogorov",onefile=!TRUE)
@ 
<<results=tex>>=
x <- y <- seq(-2, 2, len = 20)
model <- RMkolmogorov()
simu <- RFsimulate(model, x, y, z = 1) 
plot(simu, select.variables = list(1 : 2), col = c("red"))
plot(model, dim = 3, xlim = c(-3, 3), MARGIN = 1 : 2, cex = 2.3,
            fixed.MARGIN = 1.0, main = "", col = "brown")
@
Here, \code{MARGIN} gives the two coordinate directions that should be 
plotted if the dimension $d$ is greater than $2$. The argument
 \code{fixed.MARGIN} gives the values of the remaining 
coordinates, here one coordinate, that are kept fix. In fact,
 \code{fixed.MARGIN = 0.0}, which is the default, does not 
yield very illuminating results, cf. Equation~\ref{eq:kolmo},
so that we have chosen \code{fixedMARGIN = 1.0}.

 
\begin{figure}
  \centering
   \vspace*{-1em}
  \includegraphics[width=6.9cm]{\pdf kolmogorov000}

  \vspace*{.5em}

  \includegraphics[width=9.3cm]{\pdf kolmogorov001}
 \caption{Kolmogorov's model of turbulence.  The top picture shows
    the vector field of the first two components of a simulated three-dimensional
    vector field at the locations where the third coordinate is kept
    fixed. Their length can be visibly inspected by comparing them to
    the above arrow which represents a vector of length 2. 
The bottom pictures show the variogram values between all components
at the locations where the third component is fixed to the value $1$. 
    \label{fig:kolmogorov}}
\end{figure}

\section{Example: weather data}\label{sec:example}
The data set considered here gives the difference between both the
pressure and the temperature at 157 locations in the United States
measured at a certain time instance and their predictions 48 hours ago.
As in \cite{GKS10} we assume that the expectation of the differences
is zero, and refer to \code{data(weather)} for
details.


We consider first 
a simplified version of the bivariate Whittle-Mat\'ern model 
from Section~\ref{sec:basic}
where $\nu_{\rm red}$ is set to $1$
and the scale $s_{11}=s_{12}=s_{22}$ 
is the same for all entries in the cross covariance.
A bivariate nugget effect
with independent components is added:
<<>>=
nug <- RMmatrix(M = matrix(nc = 2, c(NA, 0, 0, NA)), RMnugget())
pars.model <- nug + RMbiwm(nudiag = c(NA, NA), scale = NA, 
                              cdiag = c(NA, NA), rhored = NA)
@
This model is called `parsimonious model' in \cite{GKS10}.
We transform the earth coordinates to Euclidean distances
before performing the analysis:
<<>>=
data(weather)
Dist.mat <- as.vector(RFearth2dist(weather[ , 3 : 4]))
@
The function \code{RFfit}  recognizes all
parameters that have the value \code{NA}, and estimates them through
ML. Fitting the parsimonious model yields
<<>>=
PT <- weather[ , 1 : 2]
@ 
<<eval=FALSE>>=
pars <- RFfit(pars.model, distances = Dist.mat, dim = 3, data = PT)
@ 
<<>>=
print(pars)
@  
The main part is table below {\tt User's variables}. Here,
the rows deliver the estimated values and their standard deviations,
respectively. 
Each column name indicates which parameter is estimated 
and consists of three
parts separated by dots. 
Let us consider the first name '\code{matrix.M.1}'.
The left part '\code{matrix}' 
refers to the model '\code{RMmatrix}', 
the middle part '\code{M}'  to the parameter $M$ of the model 
and the right part '\code{1}'
numbers consecutively the entries of the parameter.
In case the parameter is a scalar, no number is attached.
The names \code{matrix.M.1} and \code{matrix.M.2} denote the
nugget effect of the 
first and second component, 
\code{biwm.s} denotes the scale $s$,
\code{biwm.nudiag.1} and \code{biwm.nudiag.2} refer to $\nu_{11}$
and $\nu_{22}$, \code{biwm.cdiag.1} and \code{biwm.cdiag.2} denote $c_{11}$ and 
$c_{22}$, and \code{biwm.rhored} refers to $\rho_{\rm red}$
of the bivariate Whittle-Mat\'ern model in
Section~\ref{sec:basic}.
As \code{matrix.M.2} is close to zero, a note is displayed at the end and
the boundaries 
 used in \code{optim} are given, see the above table after {\tt Internal variables}.

Note that the values found in 
\cite{GKS10} deviate slightly, as the former and the current
optimization algorithm differ.
Note also that due to internal representation issues the values for
the estimated standard deviation reported above differ slightly for the
'\code{Internal variables}'.

As mentioned in Section~\ref{sec:simulation} not only the parsimonious
model is fitted, but a sequence of  models. 
All models within this sequence can be made visible by
<<>>=
print(pars, full=TRUE)
@
The first model refers to the independent model. The first two lines 
of the table after {\tt User's variables}
correspond to the first component, the last two lines to the second component.
Parameters that have a dash are not estimated for the respective component.
In the second model, the components are also assumed to be independent
($\rho_{\rm red}=0$), but share the same scale parameter. 
For the fixed parameter $\rho_{\rm red}$, 
reporting the standard deviation is not appropriate,
indicated by a dash.
Here, the independent model, which is the simplest
model concerning parameter estimation, has been fitted first. The
fitted parameters serve as initial values for estimating the
parameters of the second model, called {\tt simple multivariate} model here. 
The parameters of the 
latter are finally used as starting values for the parsimonious model.

As the parsimonious model has the smallest AIC, it should be chosen among the 
three models. This finding is supported by the likelihood ratio test
which uses a $\chi^2$ approximation:
<<>>=
RFratiotest(pars)
@ 
Here, the null model is the simple multivariate 
model and the alternative model is
the parsimonious model. The \code{RFratiotest} 
reports the test statistic only for these two models,
as the parsimonious model and the independent model do not include
each other. The latter is true since the parsimonious model is 
more flexible with regard to the correlation structure while the
independent model is more flexible with regard to scaling, cf.\ the
arguments \code{c} and \code{s}, respectively.

Following \pkg{geoR}, the cross validation
<<eval=FALSE>>=
RFcrossvalidate(pars, x = weather[ , 3 : 4], data = PT, full = TRUE)
@
fits the model only to the complete data set
and then the value at each of the 157 locations is predicted by kriging
given the data at all the other locations. 
Again, the argument \code{full=TRUE} produces information about the
internal sequence. The reported deviations are 
about the same for all three models. Hence, cross validation does not
give a clear preferance to any of the three models.


In \cite{GKS10}, also the whole bivariate
Whittle-Mat\'ern model has been 
considered, cf.~Section~\ref{sec:multi}.
Re-analysis of this model can be done in a similar
way as for the parsimonious model,
<<>>=
whole.model <- nug + RMbiwm(nudiag = c(NA, NA), nured = NA, 
                           s = rep(NA, 3), cdiag = c(NA, NA), rhored = NA)
@ 
<<eval=FALSE>>=
whole <- RFfit(whole.model, distances = Dist.mat, dim = 3, data = PT)
@
Now, the likelihood ratio test between the parsimonious and the whole
model,
<<>>=
RFratiotest(nullmodel = pars, alternative = whole)
@ 
yields that the parsimonious model should be preferred.


Finally, Figure~\ref{fig:kriging} shows
the kriged field for the parsimonious model that interpolates pressure
and temperature.
To this end, the earth coordinates have been projected onto the
plane.
<<>>=
a <- colMeans(weather[ , 3 : 4]) * pi / 180
P <- cbind(c(-sin(a[1]), cos(a[1]), 0),
              c(-cos(a[1]) * sin(a[2]), -sin(a[1]) * sin(a[2]), cos(a[2])),
              c(cos(a[1]) * cos(a[2]), sin(a[1]) * cos(a[2]), sin(a[2])))
x <- RFearth2cartesian(weather[ , 3 : 4])
plane <- (x %*% P)[ , 1 : 2]
@

Subsequently, kriging has been performed on a $200\times200$ grid in
the plane,
<<echo=FALSE>>=
RFoptions(file="kriging", onefile=TRUE)
#options(device="jpeg")
@ 
<<results=tex>>=
n <- 200
r <- apply(plane, 2, range)
data <- cbind(plane, weather[ , 1 : 2])
z <- RFinterpolate(pars, data = data, dim = 2,
                      x = seq(r[1, 1], r[2, 1], length = n),
                      y = seq(r[1, 2], r[2, 2], length = n),
                      varunits = c("Pa", "K"))
plot(z)
@


\begin{figure}
  \centering
  \includegraphics[width=10cm]{\pdf kriging}
  \caption{The kriged bivariate random field for the atmospheric data
    considered in Section~\ref{sec:example}.
    \label{fig:kriging}}
\end{figure}


\section{Concluding remarks}
\label{sec:outlook}
Here, the multivariate features of \pkg{RandomFields}
version 3.0 have been presented. Besides the extension of the tool box
for analyzing and simulating 
random fields, a fundamental goal of
version 3.0 of \pkg{RandomFields}
has been the improvement of the accessibility of the package.
To this end, the number of functions and the number of
visible arguments have been reduced, at the same time as the
functionality of the package has been extended. Models are now
defined as functions, and  even the ``tilde'' definition (\code{~})
of models can be used, in  accordance with the formula
specification of linear models. The number of man pages has been
largely increased, offering a separate man page for each model.
Further, several summary pages are included, and
the documentation of more advanced
features is shifted to secondary pages.

Currently, \pkg{RandomFields} offers more than 35 simple models and more than 30
functionals operating on simple models to construct more complex
ones. Besides multivariate models also space-time models are included.
\pkg{RandomFields} offers a modular construction system that allows
for any combination of models, functionals
operating on models, and functions, 
whenever the combination is mathematically sound.
Validity checks of the model are performed by \pkg{RandomFields}.

The inference on Gaussian random fields will be extended towards
mixed models with a spatial Gaussian component.
The package will also advance into the analysis and the modeling of
non-Gaussian fields, in particular max-stable random fields.

In Section~\ref{sec:example}
all the bivariate data have been co-located. This is certainly not the case for
many data sets.
 Now, co-located multivariate data ease algorithms for estimation
and spatial prediction.  \pkg{RandomFields}
is being developed towards arbitrary data where missing values are
coded by \code{NA}s.


\section*{Acknowledgment}
The project has been financially supported by the German Science
Foundation (DFG), Research Training Groups 1644 ``Scaling problems in
Statistics'' and 1023 ``Identification in Mathematical Models'', and
by Volkswagen Stiftung within the project `WEX-MOP'. 
The authors are grateful to Ulrike Ober for suggestions on the paper.
The authors are much obliged to Paulo Ribeiro, Edzer Pebesma and an
unknown referee for many valuable comments that helped
to significantly improve both the package and the paper.
Being the maintainer of \pkg{RandomFields}, M.\ Schlather is also
indebted to
Daphne Boecker,
Katharina Burmeister,
Sebastian Engelke,
Sebastian Gro\ss,
Juliane Manitz, and
Johannes Martini
for their contributions to version 3.0 of the package.

\bibliography{multivariate.jss} 

<<result=tex,echo=FALSE>>=
# Sweave does not work in BATCH mode without the following lines.
# Sweave memorizes somehow that the above plot's have first closed
# Sweave's graphical output before opening one's own output. As a
# revanche, Sweave kills the last figure.
if (!interactive()) {
  RFoptions(file="schnulli_schnulli",onefile=TRUE)
  plot(simu)
}
@ 


\end{document}
